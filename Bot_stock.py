import asyncio
from playwright.async_api import async_playwright, TimeoutError
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import nest_asyncio
import logging

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Cho ph√©p l·ªìng event loops
nest_asyncio.apply()

# C√†i ƒë·∫∑t Token Telegram Bot
TELEGRAM_TOKEN = "7705072328:AAElGoUVLaXNnbwsMyBg59tWOCXNdVtHkz4"

async def lay_chi_tiet(stock_symbol):
    async with async_playwright() as playwright:
        browser = None
        try:
            # Kh·ªüi t·∫°o browser v·ªõi ch·∫ø ƒë·ªô hi·ªÉn th·ªã
            browser = await playwright.chromium.launch(
                headless=False,  # Hi·ªÉn th·ªã tr√¨nh duy·ªát
                args=['--start-maximized']  # M·ªü c·ª≠a s·ªï to
            )
            
            # T·∫°o context v·ªõi k√≠ch th∆∞·ªõc c·ª≠a s·ªï l·ªõn
            context = await browser.new_context(
                viewport={'width': 1000, 'height': 1000}
            )
            
            page = await context.new_page()

            # ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang web
            await page.goto("https://iboard.ssi.com.vn/", timeout=30000)
            await asyncio.sleep(2)  # ƒê·ª£i trang load

            # T√¨m v√† click v√†o m√£ ch·ª©ng kho√°n
            stock_selector = f'div[role="gridcell"][col-id="stockSymbol"]:has-text("{stock_symbol}")'
            await page.wait_for_selector(stock_selector)
            await page.click(stock_selector)
            await asyncio.sleep(2)  # ƒê·ª£i sau khi click

            # L·∫•y th√¥ng tin t·ª´ ph·∫ßn t·ª≠ .stock-header-price
            price_element = await page.wait_for_selector('.stock-header-price', timeout=15000)

            if price_element:
                # L·∫•y gi√° hi·ªán t·∫°i
                current_price = await price_element.query_selector('.text-3xl > div')
                current_price = await current_price.inner_text() if current_price else 'Kh√¥ng t√¨m th·∫•y gi√°'
                
                # L·∫•y th√™m th√¥ng tin kh√°c
                open_price = await price_element.query_selector('div.flex > div.text-color-down')
                open_price = await open_price.inner_text() if open_price else 'Kh√¥ng t√¨m th·∫•y'
                
                low_price = await price_element.query_selector('div.flex:nth-child(2) > div.text-color-down')
                low_price = await low_price.inner_text() if low_price else 'Kh√¥ng t√¨m th·∫•y'
                
                high_price = await price_element.query_selector('div.flex:nth-child(2) > div.text-color-up')
                high_price = await high_price.inner_text() if high_price else 'Kh√¥ng t√¨m th·∫•y'
                
                total_volume = await price_element.query_selector('div.flex:nth-child(3) > div.text-color-tertiary')
                total_volume = await total_volume.inner_text() if total_volume else 'Kh√¥ng t√¨m th·∫•y'

                # ƒê·ª£i 3 gi√¢y ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ th·∫•y d·ªØ li·ªáu
                await asyncio.sleep(3)

                # T·∫°o message response
                message = f"üìä Th√¥ng tin c·ªï phi·∫øu {stock_symbol}:\n\n"
                message += f"üí∞ Gi√° hi·ªán t·∫°i: {current_price}\n"
                message += f"üìà Gi√° m·ªü c·ª≠a: {open_price}\n"
                message += f"‚¨ÜÔ∏è Cao nh·∫•t: {high_price}\n"
                message += f"‚¨áÔ∏è Th·∫•p nh·∫•t: {low_price}\n"
                message += f"üìä Kh·ªëi l∆∞·ª£ng: {total_volume}"

                # ƒê·ª£i th√™m 2 gi√¢y tr∆∞·ªõc khi ƒë√≥ng browser
                await asyncio.sleep(2)
                return message
            else:
                return f"‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√° c·ªßa m√£ {stock_symbol}"

        except Exception as e:
            logger.error(f"L·ªói: {str(e)}")
            return f"‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm m√£ {stock_symbol}"

        finally:
            if browser:
                await asyncio.sleep(1)  # ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi ƒë√≥ng
                await browser.close()

async def stock_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if len(context.args) == 0:
            await update.message.reply_text(
                "üìù Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu\n"
                "C√°ch d√πng: /stock <m√£ cp>\n"
                "V√≠ d·ª•: /stock VNM",
                parse_mode="Markdown"
            )
            return

        stock_code = context.args[0].upper()
        status_message = await update.message.reply_text(
            f"‚è≥ ƒêang m·ªü tr√¨nh duy·ªát ƒë·ªÉ t√¨m th√¥ng tin c·ªï phi·∫øu {stock_code}...",
            parse_mode="Markdown"
        )

        result = await lay_chi_tiet(stock_code)
        await status_message.edit_text(result)
        
    except Exception as e:
        logger.error(f"L·ªói trong stock_command: {e}")
        error_message = "‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau"
        if 'status_message' in locals():
            await status_message.edit_text(error_message)
        else:
            await update.message.reply_text(error_message)

def main():
    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("stock", stock_command))
        print("ü§ñ Bot ƒë√£ s·∫µn s√†ng!")
        app.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông bot: {e}")
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    main()
