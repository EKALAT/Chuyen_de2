import asyncio
from playwright.async_api import async_playwright, TimeoutError
import json
import logging
import nest_asyncio

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Cho ph√©p l·ªìng event loops
nest_asyncio.apply()

async def lay_chi_tiet(stock_symbol):
    async with async_playwright() as playwright:
        browser = None
        try:
            # Thay ƒë·ªïi th√†nh hi·ªÉn th·ªã browser v√† th√™m c√°c options
            browser = await playwright.chromium.launch(
                headless=False,  # Hi·ªÉn th·ªã browser
                args=['--start-maximized']  # M·ªü c·ª≠a s·ªï to
            )
            
            context = await browser.new_context(
                viewport={'width': 1000, 'height': 1000}
            )
            
            page = await context.new_page()

            # TƒÉng timeout v√† th√™m th√¥ng b√°o
            print(f"üåê ƒêang m·ªü trang web ƒë·ªÉ t√¨m m√£ {stock_symbol}...")
            await page.goto("https://iboard.ssi.com.vn/", timeout=60000)  # TƒÉng timeout l√™n 60s
            
            # ƒê·ª£i l√¢u h∆°n ƒë·ªÉ trang load ho√†n to√†n
            await asyncio.sleep(5)  # TƒÉng th·ªùi gian ƒë·ª£i l√™n 5s

            print(f"üîç ƒêang t√¨m ki·∫øm m√£ {stock_symbol}...")
            stock_selector = f'div[role="gridcell"][col-id="stockSymbol"]:has-text("{stock_symbol}")'
            await page.wait_for_selector(stock_selector, timeout=60000)  # TƒÉng timeout
            await page.click(stock_selector)
            
            # ƒê·ª£i ƒë·ªÉ th√¥ng tin hi·ªÉn th·ªã
            await asyncio.sleep(3)

            print("üìä ƒêang l·∫•y th√¥ng tin gi√°...")
            price_element = await page.wait_for_selector('.stock-header-price', timeout=30000)

            if price_element:
                # L·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt
                current_price = await price_element.query_selector('.text-3xl > div')
                current_price = await current_price.inner_text() if current_price else 'N/A'
                
                ref_price = await price_element.query_selector('div.flex > div.text-color-down')
                ref_price = await ref_price.inner_text() if ref_price else 'N/A'
                
                ceil_price = await price_element.query_selector('div.flex:nth-child(2) > div.text-color-up')
                ceil_price = await ceil_price.inner_text() if ceil_price else 'N/A'
                
                floor_price = await price_element.query_selector('div.flex:nth-child(2) > div.text-color-down')
                floor_price = await floor_price.inner_text() if floor_price else 'N/A'
                
                total_volume = await price_element.query_selector('div.flex:nth-child(3) > div.text-color-tertiary')
                total_volume = await total_volume.inner_text() if total_volume else 'N/A'

                # ƒê·ª£i th√™m 2 gi√¢y ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ th·∫•y k·∫øt qu·∫£
                await asyncio.sleep(2)
                
                # T·∫°o response data
                response_data = {
                    "stock_code": stock_symbol,
                    "current_price": current_price,
                    "ref_price": ref_price,
                    "ceil_price": ceil_price,
                    "floor_price": floor_price,
                    "total_volume": total_volume
                }
                return json.dumps(response_data)
            else:
                return json.dumps({"error": f"Kh√¥ng t√¨m th·∫•y th√¥ng tin gi√° c·ªßa m√£ {stock_symbol}"})

        except Exception as e:
            logger.error(f"L·ªói: {str(e)}")
            return json.dumps({"error": f"C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm m√£ {stock_symbol}: {str(e)}"})

        finally:
            if browser:
                # ƒê·ª£i 1 gi√¢y tr∆∞·ªõc khi ƒë√≥ng browser
                await asyncio.sleep(1)
                await browser.close()

async def handle_client(reader, writer):
    try:
        data = await reader.read(1024)
        message = data.decode('ascii')
        addr = writer.get_extra_info('peername')
        
        logger.info(f"Received {message!r} from {addr!r}")

        # X·ª≠ l√Ω y√™u c·∫ßu STOCK
        if message.startswith('STOCK '):
            stock_code = message.split()[1].strip()
            response = await lay_chi_tiet(stock_code)
        else:
            response = json.dumps({"error": "Invalid command. Use: STOCK <code>"})

        writer.write(response.encode('ascii'))
        await writer.drain()
        
        writer.close()
        await writer.wait_closed()
        
    except Exception as e:
        logger.error(f"Error handling client: {str(e)}")
        error_response = json.dumps({"error": str(e)})
        writer.write(error_response.encode('ascii'))
        await writer.drain()
        writer.close()

async def main():
    server = await asyncio.start_server(
        handle_client, '0.0.0.0', 97
    )

    addr = server.sockets[0].getsockname()
    print(f'üöÄ Server ƒëang ch·∫°y t·∫°i {addr}')

    async with server:
        await server.serve_forever()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Server ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        logger.error(f"L·ªói server: {e}")
        print(f"‚ùå L·ªói: {e}")
