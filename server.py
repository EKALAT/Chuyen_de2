import asyncio
import json
from playwright.async_api import async_playwright
import time

async def get_stock_price(stock_code):
    """L·∫•y gi√° realtime c·ªßa m·ªôt m√£ ch·ª©ng kho√°n"""
    browser = None
    try:
        async with async_playwright() as p:
            print(f"\nüîÑ ƒêang t√¨m gi√° cho m√£ {stock_code}...")
            browser = await p.chromium.launch(
                headless=False,
                args=['--disable-dev-shm-usage', '--no-sandbox']
            )
            
            context = await browser.new_context(
                viewport={"width": 1000, "height": 1000},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            )
            
            page = await context.new_page()
            
            print("üåê ƒêang k·∫øt n·ªëi t·ªõi SSI...")
            await page.goto("https://iboard.ssi.com.vn/", wait_until="networkidle", timeout=60000)
            
            print("‚åõ ƒêang ƒë·ª£i d·ªØ li·ªáu t·∫£i...")
            await page.wait_for_selector(".ag-body-viewport", timeout=60000)

            # T√¨m v√† nh·∫≠p m√£ ch·ª©ng kho√°n v√†o √¥ t√¨m ki·∫øm
            print(f"üîç ƒêang t√¨m m√£ {stock_code}...")
            search_box = await page.wait_for_selector('input[placeholder="Nh·∫≠p m√£ CK"]')
            await search_box.click()
            await search_box.fill(stock_code)
            await asyncio.sleep(1)  # ƒê·ª£i cho k·∫øt qu·∫£ t√¨m ki·∫øm hi·ªÉn th·ªã
            
            # T√¨m t·∫•t c·∫£ c√°c h√†ng trong b·∫£ng sau khi ƒë√£ l·ªçc
            rows = await page.query_selector_all(".ag-center-cols-container .ag-row")
            stock_data = None

            # Ki·ªÉm tra h√†ng ƒë·∫ßu ti√™n (th∆∞·ªùng l√† k·∫øt qu·∫£ t√¨m ki·∫øm)
            if len(rows) > 0:
                try:
                    row = rows[0]  # L·∫•y h√†ng ƒë·∫ßu ti√™n
                    code_el = await row.query_selector(".stock-symbol")
                    if code_el:
                        code = await code_el.inner_text()
                        
                        if code.strip().upper() == stock_code.upper():
                            price_el = await row.query_selector("[col-id='lastPrice']")
                            price = await price_el.inner_text() if price_el else "N/A"
                            
                            change_el = await row.query_selector("[col-id='change']")
                            change = await change_el.inner_text() if change_el else "N/A"
                            
                            volume_el = await row.query_selector("[col-id='volume']")
                            volume = await volume_el.inner_text() if volume_el else "N/A"
                            
                            stock_data = {
                                "ma_ck": code,
                                "gia": price.strip(),
                                "thay_doi": change.strip(),
                                "klgd": volume.strip(),
                                "thoi_gian": time.strftime("%H:%M:%S")
                            }
                except Exception as e:
                    print(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")

            if stock_data:
                print(f"‚úÖ ƒê√£ t√¨m th·∫•y gi√° m√£ {stock_code}")
                return {
                    "status": "success",
                    "data": stock_data
                }
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y m√£ {stock_code}")
                return {
                    "status": "error",
                    "message": f"Kh√¥ng t√¨m th·∫•y m√£ {stock_code}"
                }

    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        return {
            "status": "error",
            "message": str(e)
        }
    finally:
        if browser:
            await browser.close()

async def handle_client(reader, writer):
    try:
        data = await reader.read(100)
        message = data.decode()
        addr = writer.get_extra_info('peername')
        print(f"\nüì± Client {addr!r} y√™u c·∫ßu: {message!r}")

        if message.startswith("STOCK "):
            stock_code = message.split()[1].strip().upper()
            result = await get_stock_price(stock_code)
        else:
            result = {
                "status": "error",
                "message": "Vui l√≤ng nh·∫≠p: STOCK <m√£>"
            }
            
        writer.write(json.dumps(result).encode())
        await writer.drain()
        writer.close()
        await writer.wait_closed()
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        writer.close()
        await writer.wait_closed()

async def main():
    server = await asyncio.start_server(
        handle_client, '127.0.0.1', 99
    )
    print('üöÄ Server ƒëang ch·∫°y t·∫°i 127.0.0.1:99')
    print('‚åõ ƒêang ƒë·ª£i k·∫øt n·ªëi...')

    async with server:
        await server.serve_forever()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã ƒê√£ d·ª´ng server")